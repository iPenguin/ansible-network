---

- name: Include host variables
  include_vars: "vars/{{ inventory_hostname }}.yml"
  ignore_errors: yes

- name: Configure Networking - IPv4
  command: "nmcli c m {{ ansible_default_ipv4.interface }} ip4 {{ hosts[inventory_hostname_short].ip4 }}/24"
  notify: Restart Networking
  when: ansible_os_family == "RedHat"
- name: Configure Networking - IPv6
  command: "nmcli c m {{ ansible_default_ipv6.interface }} ip6 {{ hosts[inventory_hostname_short].ip6 }}/64"
  notify: Restart Networking
  when: ansible_os_family == "RedHat"

- name: Create skeleton directory structure
  file:
    path: "{{ item }}"
    owner: "{{ ansible_user }}"
    group: "users"
    mode: 0750
    state: directory
  loop:
    - "{{ docker_root }}/{{ inventory_hostname }}/"
    - "{{ docker_root }}/{{ inventory_hostname }}/config"
    - "{{ docker_root }}/{{ inventory_hostname }}/container"
    - "{{ docker_root }}/{{ inventory_hostname }}/data"
  notify: Build container

- name: Create directory structure for container
  file:
    path: "{{ docker_root }}/{{ inventory_hostname }}/container/{{ item.path }}"
    state: "directory"
    mode: "{{ item.mode }}"
  with_filetree: "{{ docker_role_path }}/container"
  when: item.state == "directory"
  notify: Build container

- name: Deploy files into container
  copy:
    src: "{{ item.src }}"
    dest: "{{ docker_root }}/{{ inventory_hostname }}/container/{{ item.path }}"
    owner: "{{ ansible_user }}"
    group: "users"
    mode: "{{ item.mode }}"
  with_filetree: "{{ docker_role_path }}/container"
  when: item.state != "directory"
  notify: Build container

- name: Copy in run script
  template:
    src: "run.sh.j2"
    dest: "{{ docker_root }}/{{ inventory_hostname }}/run.sh"
    owner: "{{ ansible_user }}"
    group: "users"
    mode: 0750
  notify: Build container

- name: Test for a dockerfile
  stat:
    path: "{{ docker_root }}/{{ inventory_hostname }}/container/Dockerfile"
  register: does_dockerfile
  tags:
    - always

- name: Always pull latest version of remote dockers
  command: "docker pull {{ docker_image }}"
  when: does_dockerfile.stat.exists == false
  tags:
    - always

- name: Include build tasks
  include_tasks: "handlers/main.yml"
  tags:
    - never
    - build
